# ═════════════════════════════════════════════════════════════════════════════
# 🐍 JUPYTER LAB - Blueprint Code Interpreter
# Generated by Chezmoi - DO NOT EDIT MANUALLY
# Location: ~/.config/containers/systemd/jupyter/jupyter.container.tmpl
# ═════════════════════════════════════════════════════════════════════════════

[Unit]
Description={{ .infrastructure.services.jupyter.description }}
After=network-online.target {{ .infrastructure.network.name }}.network.service
{{- range .infrastructure.services.jupyter.requires }}
After={{ . }}.service
{{- end }}
Requires={{ .infrastructure.network.name }}.network.service
{{- range .infrastructure.services.jupyter.requires }}
Wants={{ . }}.service
{{- end }}

[Container]
Image=localhost/blueprint-jupyter:latest
AutoUpdate=registry
ContainerName={{ .infrastructure.services.jupyter.container_name }}

# ═════════════════════════════════════════════════════════════════════════════
# 🌐 NETWORK
# ═════════════════════════════════════════════════════════════════════════════
Network={{ .infrastructure.network.name }}.network

# ═════════════════════════════════════════════════════════════════════════════
# 📍 PUBLISHED PORT (for OpenWebUI and Caddy to access)
# ═════════════════════════════════════════════════════════════════════════════
{{- if .infrastructure.services.jupyter.published_port }}
PublishPort={{ .infrastructure.services.jupyter.bind | default "127.0.0.1" }}:{{ .infrastructure.services.jupyter.published_port }}:{{ .infrastructure.services.jupyter.port }}
{{- end }}

# ═════════════════════════════════════════════════════════════════════════════
# 💾 VOLUME (Minimal - workspace only)
# ═════════════════════════════════════════════════════════════════════════════
Volume={{ .infrastructure.services.jupyter.volume }}:/home/jovyan/blueprint-workspace:Z

# ═════════════════════════════════════════════════════════════════════════════
# 🌍 ENVIRONMENT - Auto-generated from .chezmoi.yaml.tmpl
# ═════════════════════════════════════════════════════════════════════════════

# JupyterLab configuration
Environment=JUPYTER_ENABLE_LAB=yes
Environment=NB_USER=jovyan
Environment=CHOWN_HOME=yes
Environment=CHOWN_HOME_OPTS=-R

# Notebook Intelligence Configuration (LiteLLM integration)
Environment=LITELLM_API_BASE=http://{{ .infrastructure.services.litellm.hostname }}:{{ .infrastructure.services.litellm.port }}
Environment=LITELLM_API_KEY={{ .secrets.api_keys.litellm_master }}

# Optional: Disable notebook execute tool by default (security)
# Users can enable with NBI_NOTEBOOK_EXECUTE_TOOL=enabled if needed
Environment=NBI_NOTEBOOK_EXECUTE_TOOL=disabled

# ═════════════════════════════════════════════════════════════════════════════
# 🚀 EXECUTION
# ═════════════════════════════════════════════════════════════════════════════

# Start JupyterLab with OpenWebUI-compatible settings
Exec=start-notebook.py \
  --NotebookApp.token='' \
  --NotebookApp.password='' \
  --NotebookApp.disable_check_xsrf=True \
  --NotebookApp.allow_origin='*' \
  --NotebookApp.allow_remote_access=True \
  --NotebookApp.notebook_dir=/home/jovyan/blueprint-workspace

# ═════════════════════════════════════════════════════════════════════════════
# 🔧 HEALTH CHECK
# ═════════════════════════════════════════════════════════════════════════════
HealthCmd=curl -f http://localhost:{{ .infrastructure.services.jupyter.port }}/api || exit 1
HealthInterval=30s
HealthTimeout=5s
HealthRetries=3
HealthStartPeriod=30s

# ═════════════════════════════════════════════════════════════════════════════
# 🚀 SERVICE
# ═════════════════════════════════════════════════════════════════════════════
[Service]
Slice=llm.slice
TimeoutStartSec=180
Restart=always
RestartSec=10

# Build custom image before starting (only if not exists or changed)
ExecStartPre=-/usr/bin/podman build \
  -t localhost/blueprint-jupyter:latest \
  -f %h/.config/containers/systemd/jupyter/Dockerfile \
  %h/.config/containers/systemd/jupyter

# Log startup info
ExecStartPost=/usr/bin/sh -c '\
  echo "Jupyter Lab: Started successfully"; \
  echo "Jupyter Lab: Internal URL: http://{{ .infrastructure.services.jupyter.hostname }}:{{ .infrastructure.services.jupyter.port }}"; \
  echo "Jupyter Lab: External URL: https://{{ .infrastructure.services.jupyter.external_subdomain }}.{{ .tailscale.full_hostname }}"; \
  echo "Jupyter Lab: OpenWebUI will connect to: http://{{ .infrastructure.services.jupyter.hostname }}:{{ .infrastructure.services.jupyter.port }}"; \
  echo "Jupyter Lab: Workspace: /home/jovyan/blueprint-workspace"; \
  echo "Jupyter Lab: AI Code Completion: Enabled (notebook-intelligence + LiteLLM)"'

[Install]
WantedBy=default.target

# ═════════════════════════════════════════════════════════════════════════════
# 📝 ARCHITECTURE NOTES
# ═════════════════════════════════════════════════════════════════════════════
#
# CUSTOM IMAGE:
#   - Built from scipy-notebook (scientific Python stack)
#   - Adds nb_conda_kernels (multi-environment support)
#   - Adds notebook-intelligence (AI code completion via LiteLLM)
#
# OPENWEBUI INTEGRATION:
#   - Code Interpreter: AI executes code in persistent kernel
#   - Code Execution: User clicks "Run" button for generated code
#   - Both modes more powerful than Pyodide (full Python + packages)
#
# SECURITY:
#   - No authentication (Tailscale security boundary)
#   - NBI notebook execute tool disabled by default
#   - Only blueprint-workspace volume mounted (minimal access)
#   - No GPU access (CPU sufficient for data science)
#
# AI FEATURES (notebook-intelligence):
#   - Code completion via LiteLLM
#   - Configured to use your local models
#   - Settings at ~/.jupyter/nbi/config.json
#   - Can be configured via UI: Settings → Notebook Intelligence Settings
#
# DEPENDENCIES:
#   - After litellm.service (needs LiteLLM for AI features)
#   - On llm.network (internal service discovery)
#   - Exposed via Caddy (external Tailscale access)
#
# ═════════════════════════════════════════════════════════════════════════════
