# ═════════════════════════════════════════════════════════════════════════════
# 🤖 LITELLM CONFIGURATION
# Auto-generated from .chezmoi.yaml.tmpl
# ═════════════════════════════════════════════════════════════════════════════

# ═════════════════════════════════════════════════════════════════════════════
# 🤖 MODEL DEFINITIONS
# ═════════════════════════════════════════════════════════════════════════════
model_list:
  # ───────────────────────────────────────────────────────────────────────────
  # CLOUD MODELS (OpenAI, Anthropic, Google, X.AI, etc.)
  # Auto-generated from .chezmoi.yaml.tmpl → litellm.models
  # ───────────────────────────────────────────────────────────────────────────
  {{- range .litellm.models }}
  {{- if .enabled }}
  {{- if eq .provider "openai" }}
  
  # {{ .name }} (OpenAI){{ if .description }} - {{ .description }}{{ end }}
  - model_name: {{ .name }}
    litellm_params:
      model: openai/{{ .name }}
      api_key: os.environ/OPENAI_API_KEY
      {{- if .context_window }}
      max_tokens: {{ .context_window }}
      {{- end }}
      stream: true
  
  {{- else if eq .provider "anthropic" }}
  
  # {{ .name }} (Anthropic){{ if .description }} - {{ .description }}{{ end }}
  - model_name: {{ .name }}
    litellm_params:
      model: anthropic/{{ .name }}
      api_key: os.environ/ANTHROPIC_API_KEY
      {{- if .context_window }}
      max_tokens: {{ .context_window }}
      {{- end }}
      stream: true
  
  {{- else if eq .provider "gemini" }}
  
  # {{ .name }} (Google Gemini){{ if .description }} - {{ .description }}{{ end }}
  - model_name: {{ .name }}
    litellm_params:
      model: gemini/{{ .name }}
      api_key: os.environ/GEMINI_API_KEY
      {{- if .context_window }}
      max_tokens: {{ .context_window }}
      {{- end }}
      stream: true
  
  {{- else if eq .provider "openrouter" }}
  
  # {{ .name }} (OpenRouter){{ if .description }} - {{ .description }}{{ end }}
  - model_name: {{ .name }}
    litellm_params:
      model: {{ .openrouter_model }}
      api_base: https://openrouter.ai/api/v1
      api_key: os.environ/OPENROUTER_API_KEY
      {{- if .context_window }}
      max_tokens: {{ .context_window }}
      {{- end }}
      stream: true
      custom_llm_provider: openrouter
  
  {{- else if eq .provider "groq" }}
  
  # {{ .name }} (Groq){{ if .description }} - {{ .description }}{{ end }}
  - model_name: {{ .name }}
    litellm_params:
      model: {{ .groq_model }}
      api_base: https://api.groq.com/openai/v1
      api_key: os.environ/GROQ_API_KEY
      stream: true
      custom_llm_provider: groq
  
  {{- end }}
  {{- end }}
  {{- end }}
  
  # ───────────────────────────────────────────────────────────────────────────
  # LOCAL MODELS (via llama-swap → ramalama)
  # Auto-generated from .chezmoi.yaml.tmpl → local_inference.models
  # 
  # Model Groups (managed by llama-swap):
  #   - task group (swap=false): Always loaded, never swap, instant response
  #   - heavy group (swap=true): One active at a time, auto-swap on demand
  # 
  # LiteLLM routes all models the same way - the swapping logic is in llama-swap
  # ───────────────────────────────────────────────────────────────────────────
  {{- range $key, $model := .local_inference.models }}
  {{- if $model.enabled }}
  {{- if ne $model.group "embeddings" }}
  
  # {{ $model.display_name }}{{ if $model.group }} [{{ $model.group }} group]{{ end }} (Local)
  - model_name: {{ $model.name }}
    litellm_params:
      model: openai/{{ $model.name }}
      api_base: http://{{ $.infrastructure.services.llama_swap.hostname }}:{{ $.infrastructure.services.llama_swap.port }}/v1
      api_key: "sk-no-key-required"
      stream: true
      custom_llm_provider: openai
  {{- end }}
  {{- end }}
  {{- end }}

  # ───────────────────────────────────────────────────────────────────────
  # EMBEDDING MODELS (via llama-swap → ramalama)
  # Auto-generated from .chezmoi.yaml.tmpl → local_inference.models
  # ───────────────────────────────────────────────────────────────────────
  {{- range $key, $model := .local_inference.models }}
  {{- if and $model.enabled (eq $model.group "embeddings") }}
  
  # {{ $model.display_name }} [{{ $model.group }} group] (Local Embedding)
  - model_name: {{ $model.name }}
    litellm_params:
      model: openai/{{ $model.name }}
      api_base: http://{{ $.infrastructure.services.llama_swap.hostname }}:{{ $.infrastructure.services.llama_swap.port }}/v1
      api_key: "sk-no-key-required"
      custom_llm_provider: openai
  {{- end }}
  {{- end }}

# ═════════════════════════════════════════════════════════════════════════════
# ⚙️  LITELLM SETTINGS
# ═════════════════════════════════════════════════════════════════════════════
litellm_settings:
  # Essential for compatibility with various providers
  drop_params: {{ .litellm.drop_params | default true }}
  
  # Redis caching (auto-configured from infrastructure.services)
  cache: true
  cache_params:
    type: redis
    host: {{ .infrastructure.services.litellm_redis.hostname }}
    port: {{ .infrastructure.services.litellm_redis.port }}
    ttl: 3600
  
  # Logging
  set_verbose: false

# ═════════════════════════════════════════════════════════════════════════════
# 🔧 GENERAL SETTINGS
# Database URL auto-generated from infrastructure.services
# ═════════════════════════════════════════════════════════════════════════════
general_settings:
  # Database connection (auto-generated)
  database_url: "postgresql://{{ .infrastructure.services.litellm_postgres.db_user }}@{{ .infrastructure.services.litellm_postgres.hostname }}:{{ .infrastructure.services.litellm_postgres.port }}/{{ .infrastructure.services.litellm_postgres.db_name }}"
  
  # Master key from secrets
  master_key: os.environ/LITELLM_MASTER_KEY
  
  # Store models in database
  store_model_in_db: true

# ═════════════════════════════════════════════════════════════════════════════
# 📝 NOTES
# ═════════════════════════════════════════════════════════════════════════════
#
# This file is auto-generated from .chezmoi.yaml.tmpl
#
# CLOUD MODELS are defined in: litellm.models
# LOCAL MODELS are defined in: local_inference.models
#
# SUPPORTED CLOUD PROVIDERS:
#   - openai: OpenAI GPT-5 family (gpt-5, gpt-5-mini, gpt-5-nano, gpt-5-pro)
#   - anthropic: Anthropic Claude 4.x (claude-sonnet-4-5, claude-opus-4-1)
#   - gemini: Google Gemini 2.5 (gemini-2.5-flash, gemini-2.5-pro)
#   - openrouter: OpenRouter aggregate (Grok, DeepSeek, GLM, Qwen3, Llama)
#   - groq: Groq LPU inference (gpt-oss-120b)
#
# LOCAL MODEL ROUTING:
#   OpenWebUI/Client → LiteLLM:4000 → llama-swap:9292 → ramalama containers
#
# When a request comes in for a local model (e.g. "qwen3-0.6b"):
#   1. LiteLLM receives request at :4000/v1/chat/completions
#   2. Looks up model in model_list
#   3. Sees api_base points to llama-swap
#   4. Forwards to llama-swap:9292/v1/chat/completions
#   5. llama-swap checks if ramalama container is running
#   6. If not, spawns it via podman socket (respecting group swap rules)
#   7. Routes request to ramalama container
#   8. Returns response through the chain
#
# MODEL GROUPS (llama-swap behavior):
#   - task group (swap=false): All models stay loaded, run in parallel
#   - heavy group (swap=true): Only one model active, others unload after TTL
#
# ADDING MORE MODELS:
#   1. Edit .chezmoi.yaml.tmpl (local_inference.models or litellm.models)
#   2. Set group: "task" for always-loaded models
#   3. Set group: "heavy" for swap-on-demand models
#   4. For cloud: set provider: "openai"/"anthropic"/"gemini"/"openrouter"/"groq"
#   5. Run: chezmoi apply
#   6. Restart: systemctl --user restart llama-swap litellm
#
# ═════════════════════════════════════════════════════════════════════════════
