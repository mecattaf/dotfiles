# ═════════════════════════════════════════════════════════════════════════════
# 🔊 EDGE-TTS - Text-to-Speech Service
# Generated by Chezmoi - DO NOT EDIT MANUALLY
# Location: ~/.config/containers/systemd/edgetts/edgetts.container.tmpl
# ═════════════════════════════════════════════════════════════════════════════

[Unit]
Description={{ .infrastructure.services.edgetts.description }}
After=network-online.target {{ .infrastructure.network.name }}.network.service
Requires={{ .infrastructure.network.name }}.network.service

[Container]
Image={{ .infrastructure.services.edgetts.image }}
AutoUpdate=registry
ContainerName={{ .infrastructure.services.edgetts.container_name }}

# ═════════════════════════════════════════════════════════════════════════════
# 🌐 NETWORK
# ═════════════════════════════════════════════════════════════════════════════
Network={{ .infrastructure.network.name }}.network

# ═════════════════════════════════════════════════════════════════════════════
# 📍 PUBLISHED PORT (for OpenWebUI to access)
# ═════════════════════════════════════════════════════════════════════════════
{{- if .infrastructure.services.edgetts.published_port }}
PublishPort={{ .infrastructure.services.edgetts.bind | default "127.0.0.1" }}:{{ .infrastructure.services.edgetts.published_port }}:{{ .infrastructure.services.edgetts.port }}
{{- end }}

# ═════════════════════════════════════════════════════════════════════════════
# 💾 VOLUME (for caching voice models)
# ═════════════════════════════════════════════════════════════════════════════
Volume={{ .infrastructure.services.edgetts.volume }}:/data:Z

# ═════════════════════════════════════════════════════════════════════════════
# 🌍 ENVIRONMENT - Auto-generated from .chezmoi.yaml.tmpl
# ═════════════════════════════════════════════════════════════════════════════

# Default response format
Environment=DEFAULT_RESPONSE_FORMAT={{ .edgetts.response_format }}

# Speech speed (0.5 = half speed, 2.0 = double speed)
Environment=DEFAULT_SPEED={{ .edgetts.speed }}

# Default voice (Microsoft Edge neural voice)
Environment=DEFAULT_VOICE={{ .edgetts.voice }}

# Server configuration
Environment=PORT={{ .infrastructure.services.edgetts.port }}
Environment=HOST=0.0.0.0

# Logging
Environment=LOG_LEVEL={{ .edgetts.log_level }}

# ═════════════════════════════════════════════════════════════════════════════
# 🔧 HEALTH CHECK (Harbor-style multi-endpoint verification)
# ═════════════════════════════════════════════════════════════════════════════

# Primary health check - service responsiveness
HealthCmd=wget --no-verbose --tries=1 --spider http://localhost:{{ .infrastructure.services.edgetts.port }}/health || exit 1
HealthInterval=30s
HealthTimeout=10s
HealthRetries=5
HealthStartPeriod=30s

# ═════════════════════════════════════════════════════════════════════════════
# 🚀 SERVICE
# ═════════════════════════════════════════════════════════════════════════════
[Service]
Slice=llm.slice
TimeoutStartSec=300
Restart=on-failure
RestartSec=10

# Harbor-style startup verification
ExecStartPost=/bin/sh -c '\
  echo "Edge-TTS: Waiting for service to be ready..."; \
  for i in $(seq 1 30); do \
    if wget --no-verbose --tries=1 --spider --timeout=2 http://localhost:{{ .infrastructure.services.edgetts.port }}/health 2>/dev/null; then \
      echo "Edge-TTS: ✓ Service health check passed"; \
      if wget --no-verbose --tries=1 --spider --timeout=2 http://localhost:{{ .infrastructure.services.edgetts.port }}/v1/voices 2>/dev/null; then \
        echo "Edge-TTS: ✓ Voice API available"; \
        echo "Edge-TTS: Service ready at http://localhost:{{ .infrastructure.services.edgetts.port }}"; \
        exit 0; \
      fi; \
    fi; \
    sleep 1; \
  done; \
  echo "Edge-TTS: ⚠ Service started but verification incomplete (will retry on first use)"; \
  exit 0'

[Install]
# No WantedBy - dependencies via After/Requires
