# ═════════════════════════════════════════════════════════════════════════════
# 🌉 CADDY - Reverse Proxy for LLM Services
# Generated by Chezmoi - DO NOT EDIT MANUALLY
# Location: ~/.config/containers/systemd/caddy/caddy.container.tmpl
# ═════════════════════════════════════════════════════════════════════════════

[Unit]
Description=Caddy Reverse Proxy for LLM Services
Documentation=https://caddyserver.com/docs/

# ═════════════════════════════════════════════════════════════════════════════
# 🔗 DEPENDENCIES - Auto-generated from .chezmoi.yaml.tmpl
# ═════════════════════════════════════════════════════════════════════════════

# Core infrastructure (required)
After=network-online.target {{ .infrastructure.network.name }}.network.service
Requires={{ .infrastructure.network.name }}.network.service

# Tailscale (optional - Caddy can start without it for local testing)
After=tailscaled.service
Wants=tailscaled.service

# Backend services with web interfaces (optional - auto-generated)
# Services are added automatically when they have 'external_subdomain' defined
# Using After= ensures Caddy starts after backends are ready
# Using Wants= (not Requires=) allows Caddy to start even if a backend is down
{{- range $name, $service := .infrastructure.services }}
{{- if and $service.enabled $service.external_subdomain }}
After={{ $service.container_name }}.service
Wants={{ $service.container_name }}.service
{{- end }}
{{- end }}

[Container]
Image=docker.io/caddy:2-alpine
AutoUpdate=registry
ContainerName=caddy

# ═════════════════════════════════════════════════════════════════════════════
# 🌐 NETWORK - Connect to llm.network for backend access
# ═════════════════════════════════════════════════════════════════════════════
Network={{ .infrastructure.network.name }}.network

# ═════════════════════════════════════════════════════════════════════════════
# 📍 PUBLISHED PORTS - Expose HTTP/HTTPS for Tailscale
# ═════════════════════════════════════════════════════════════════════════════

# HTTP (port 80) - redirects to HTTPS
PublishPort=80:80

# HTTPS (port 443) - main traffic
PublishPort=443:443

# HTTP/3 over QUIC (UDP port 443) - modern protocol
PublishPort=443:443/udp

# ═════════════════════════════════════════════════════════════════════════════
# 💾 VOLUMES
# ═════════════════════════════════════════════════════════════════════════════

# Main Caddyfile
Volume=%h/.config/caddy/Caddyfile:/etc/caddy/Caddyfile:ro,Z

# Service-specific configs (*.caddy files)
# These are imported by the main Caddyfile
Volume=%h/.config/caddy:/etc/caddy/conf.d:ro,Z

# Persistent config storage (Caddy's internal state)
Volume=caddy-config.volume:/config:Z

# Certificate storage (though Tailscale handles TLS)
Volume=caddy-data.volume:/data:Z

# Log directory (shared with host for easy access)
Volume=%h/.local/share/caddy/logs:/var/log/caddy:Z

# ═════════════════════════════════════════════════════════════════════════════
# 🌍 ENVIRONMENT
# ═════════════════════════════════════════════════════════════════════════════

# Config file location
Environment=CADDY_CONFIG_FILE=/etc/caddy/Caddyfile

# Disable admin API (security)
Environment=CADDY_ADMIN=off

# ═════════════════════════════════════════════════════════════════════════════
# 🔧 HEALTH CHECK
# ═════════════════════════════════════════════════════════════════════════════

# Check if Caddy is responding
HealthCmd=wget --no-verbose --tries=1 --spider --timeout=2 http://localhost:80 || exit 1
HealthInterval=15s
HealthTimeout=5s
HealthRetries=5
HealthStartPeriod=30s

# ═════════════════════════════════════════════════════════════════════════════
# 🚀 SERVICE
# ═════════════════════════════════════════════════════════════════════════════
[Service]
Slice=llm.slice
TimeoutStartSec=60
Restart=always
RestartSec=10

# Create log directory if it doesn't exist
ExecStartPre=/usr/bin/mkdir -p %h/.local/share/caddy/logs

# ─────────────────────────────────────────────────────────────────────────────
# CONFIG VALIDATION - Prevent bad configs from taking down Caddy
# ─────────────────────────────────────────────────────────────────────────────

# Validate config BEFORE starting (prevents startup with bad config)
ExecStartPre=-/usr/bin/sh -c '\
  echo "Caddy: Validating configuration..."; \
  if ! podman run --rm \
    -v %h/.config/caddy/Caddyfile:/etc/caddy/Caddyfile:ro \
    -v %h/.config/caddy:/etc/caddy/conf.d:ro \
    docker.io/caddy:2-alpine caddy validate --config /etc/caddy/Caddyfile; then \
    echo "Caddy: ❌ Configuration validation failed!"; \
    echo "Caddy: Please check your .caddy files for syntax errors"; \
    exit 1; \
  else \
    echo "Caddy: ✅ Configuration valid"; \
  fi'

# Log startup info
ExecStartPost=/usr/bin/sh -c '\
  echo "Caddy: Started successfully"; \
  echo "Caddy: Logs: journalctl --user -u caddy -f"; \
  echo "Caddy: Serving routes for:"; \
  {{- range $name, $service := .infrastructure.services }}
  {{- if and $service.enabled $service.external_subdomain }}
  echo "  - {{ $service.external_subdomain }}.{{ $.tailscale.full_hostname }} → {{ $service.container_name }}:{{ $service.port }}"; \
  {{- end }}
  {{- end }}
'

# ─────────────────────────────────────────────────────────────────────────────
# GRACEFUL RELOAD - For config changes without downtime
# ─────────────────────────────────────────────────────────────────────────────

# On reload, validate first, then gracefully reload Caddy
ExecReload=-/usr/bin/sh -c '\
  echo "Caddy: Validating new configuration..."; \
  if ! podman run --rm \
    -v %h/.config/caddy/Caddyfile:/etc/caddy/Caddyfile:ro \
    -v %h/.config/caddy:/etc/caddy/conf.d:ro \
    docker.io/caddy:2-alpine caddy validate --config /etc/caddy/Caddyfile; then \
    echo "Caddy: ❌ New configuration is invalid! Keeping current config."; \
    exit 1; \
  else \
    echo "Caddy: ✅ New configuration valid, reloading..."; \
    podman exec caddy caddy reload --config /etc/caddy/Caddyfile; \
    echo "Caddy: ✅ Reloaded successfully (zero-downtime)"; \
  fi'

[Install]
WantedBy=default.target

# ═════════════════════════════════════════════════════════════════════════════
# 📝 ARCHITECTURE NOTES
# ═════════════════════════════════════════════════════════════════════════════
#
# WHY SINGLE CADDY?
#   - Caddy itself is extremely stable (rarely crashes)
#   - Backend failures → Caddy returns 502 but stays running
#   - Config errors → prevented by validation (ExecStartPre)
#   - Multiple Caddys would need port mapping (8080, 8081...) and a master router
#
# DEPENDENCY STRATEGY:
#   - After= ensures Caddy starts after backends are ready
#   - Wants= (not Requires=) allows Caddy to start even if backend is down
#   - Caddy gracefully handles unavailable backends (shows 502, retries)
#
# AUTO-GENERATION:
#   - Service list is auto-generated from .chezmoi.yaml.tmpl
#   - Any service with 'external_subdomain' is automatically included
#   - No manual maintenance needed when adding new services!
#
# RESILIENCE:
#   - Config validation prevents bad configs from taking down Caddy
#   - Health checks detect if Caddy stops responding
#   - Always restart policy ensures recovery from crashes
#   - Graceful reload allows config changes without downtime
#
# ZERO-DOWNTIME RELOADS:
#   After changing any .caddy file:
#     1. chezmoi apply
#     2. systemctl --user reload caddy
#   Caddy validates config, then reloads without dropping connections
#
# ═════════════════════════════════════════════════════════════════════════════
