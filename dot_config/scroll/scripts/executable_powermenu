#!/usr/bin/env bash

# Enhanced Rofi Power Menu Script with Battery Information
# Simple approach - just get accurate battery data and use existing theme

# Directory and theme path
dir="$HOME/.config/rofi/powermenu"
theme="$dir/powermenu.rasi"

# Create theme directory if it doesn't exist
mkdir -p "$dir"

# Battery detection functions (based on waybar battery module)
get_battery_info() {
    local power_supply_dir="/sys/class/power_supply"
    local battery_path=""
    local adapter_path=""
    
    # Find battery
    for bat_dir in "$power_supply_dir"/BAT*; do
        if [[ -d "$bat_dir" && -f "$bat_dir/capacity" && -f "$bat_dir/status" ]]; then
            if [[ -f "$bat_dir/type" ]]; then
                local type=$(cat "$bat_dir/type" 2>/dev/null)
                if [[ "$type" == "Battery" ]]; then
                    battery_path="$bat_dir"
                    break
                fi
            fi
        fi
    done
    
    # Find adapter
    for adapter_dir in "$power_supply_dir"/{ADP*,AC*,ACAD*}; do
        if [[ -d "$adapter_dir" && -f "$adapter_dir/online" ]]; then
            adapter_path="$adapter_dir"
            break
        fi
    done
    
    if [[ -z "$battery_path" ]]; then
        echo "No battery detected"
        return
    fi
    
    # Get battery capacity
    local capacity=0
    if [[ -f "$battery_path/capacity" ]]; then
        capacity=$(cat "$battery_path/capacity" 2>/dev/null || echo "0")
    fi
    
    # Get battery status
    local status="Unknown"
    if [[ -f "$battery_path/status" ]]; then
        status=$(cat "$battery_path/status" 2>/dev/null || echo "Unknown")
    fi
    
    # Check adapter status
    local adapter_online=0
    if [[ -n "$adapter_path" && -f "$adapter_path/online" ]]; then
        adapter_online=$(cat "$adapter_path/online" 2>/dev/null || echo "0")
    fi
    
    # Override status if adapter is plugged but status says discharging
    if [[ "$adapter_online" == "1" && "$status" == "Discharging" ]]; then
        if [[ "$capacity" -eq 100 ]]; then
            status="Full"
        else
            status="Charging"
        fi
    fi
    
    # Get time remaining using acpi if available (more reliable)
    local time_info=""
    if command -v acpi &> /dev/null; then
        local acpi_output=$(acpi -b 2>/dev/null | head -1)
        if [[ -n "$acpi_output" ]]; then
            # Extract time from acpi output (format: Battery 0: Discharging, 85%, 02:30:00 remaining)
            time_info=$(echo "$acpi_output" | grep -o '[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' | head -1)
            if [[ -n "$time_info" ]]; then
                # Convert HH:MM:SS to readable format
                local hours=$(echo "$time_info" | cut -d: -f1)
                local minutes=$(echo "$time_info" | cut -d: -f2)
                # Remove leading zeros
                hours=$((10#$hours))
                minutes=$((10#$minutes))
                
                if [[ "$status" == "Charging" ]]; then
                    time_info="${hours}h ${minutes}m to full"
                else
                    time_info="${hours}h ${minutes}m remaining"
                fi
            fi
        fi
    fi
    
    # Fallback to simple status if no time available
    if [[ -z "$time_info" ]]; then
        case "$status" in
            "Full")
                time_info="Fully charged"
                ;;
            "Charging")
                time_info="Charging..."
                ;;
            "Discharging")
                time_info="Discharging"
                ;;
            "Not charging")
                time_info="Not charging"
                ;;
            *)
                time_info="$status"
                ;;
        esac
    fi
    
    # Get battery icon
    local icon=""
    if [[ "$status" == "Charging" ]]; then
        icon="󰂄"
    elif [[ "$status" == "Full" ]]; then
        icon="󰁹"
    else
        # Discharging icons based on percentage
        if [[ "$capacity" -ge 90 ]]; then
            icon="󰁹"
        elif [[ "$capacity" -ge 80 ]]; then
            icon="󰂂"
        elif [[ "$capacity" -ge 70 ]]; then
            icon="󰂁"
        elif [[ "$capacity" -ge 60 ]]; then
            icon="󰂀"
        elif [[ "$capacity" -ge 50 ]]; then
            icon="󰁿"
        elif [[ "$capacity" -ge 40 ]]; then
            icon="󰁾"
        elif [[ "$capacity" -ge 30 ]]; then
            icon="󰁽"
        elif [[ "$capacity" -ge 20 ]]; then
            icon="󰁼"
        elif [[ "$capacity" -ge 10 ]]; then
            icon="󰁻"
        else
            icon="󰁺"
        fi
    fi
    
    echo "$icon $capacity% • $time_info"
}

# Get battery information
battery_display=$(get_battery_info)

# Define options with their icons (matching your current wlogout layout)
options=(
    "󰤄 Suspend"     # systemctl suspend
    "󰜉 Reboot"      # systemctl reboot
    "⏻ Shutdown"    # systemctl poweroff
    "󰗽 Logout"      # swaymsg exit
)

# Show powermenu with rofi and get selection
selected=$(printf '%s\n' "${options[@]}" | rofi \
    -dmenu \
    -i \
    -p "Power Menu" \
    -mesg "$battery_display" \
    -theme "$theme")

# Execute the selected action immediately
case "$selected" in
    "󰤄 Suspend")
        systemctl suspend
        ;;
    "󰜉 Reboot")
        systemctl reboot
        ;;
    "⏻ Shutdown")
        systemctl poweroff
        ;;
    "󰗽 Logout")
        swaymsg exit
        ;;
esac
