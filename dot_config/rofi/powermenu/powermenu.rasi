#!/usr/bin/env bash

# Enhanced Rofi Power Menu Script with Battery Information
# Uses waybar-style battery detection and real-time updates
# Maintains original aesthetic while adding battery status and details

# Directory and theme path
dir="$HOME/.config/rofi/powermenu"
theme="$dir/powermenu.rasi"
dynamic_theme="$dir/powermenu-dynamic.rasi"

# Create theme directory if it doesn't exist
mkdir -p "$dir"

# Catppuccin Mocha colors for battery status
declare -A battery_colors=(
    ["charging"]="#89b4fa"   # Blue - when charging/plugged
    ["good"]="#a6e3a1"       # Green - battery above 40%
    ["warning"]="#f9e2af"    # Yellow - battery 21-39%
    ["critical"]="#f38ba8"   # Red - battery below 20%
    ["unknown"]="#6c7086"    # Surface2 - unknown status
)

# Battery detection functions (based on waybar battery module)
get_battery_path() {
    local battery_path=""
    local power_supply_dir="/sys/class/power_supply"
    
    # Look for the main battery (similar to waybar logic)
    if [[ -d "$power_supply_dir" ]]; then
        for bat_dir in "$power_supply_dir"/BAT*; do
            if [[ -d "$bat_dir" && -f "$bat_dir/capacity" && -f "$bat_dir/status" ]]; then
                # Check if it's actually a battery
                if [[ -f "$bat_dir/type" ]]; then
                    local type=$(cat "$bat_dir/type" 2>/dev/null)
                    if [[ "$type" == "Battery" ]]; then
                        battery_path="$bat_dir"
                        break
                    fi
                fi
            fi
        done
    fi
    
    echo "$battery_path"
}

get_adapter_path() {
    local adapter_path=""
    local power_supply_dir="/sys/class/power_supply"
    
    # Look for AC adapter
    if [[ -d "$power_supply_dir" ]]; then
        for adapter_dir in "$power_supply_dir"/{ADP*,AC*,ACAD*}; do
            if [[ -d "$adapter_dir" && -f "$adapter_dir/online" ]]; then
                adapter_path="$adapter_dir"
                break
            fi
        done
    fi
    
    echo "$adapter_path"
}

get_battery_info() {
    local battery_path=$(get_battery_path)
    local adapter_path=$(get_adapter_path)
    
    if [[ -z "$battery_path" ]]; then
        echo "N/A|0|No battery detected|unknown"
        return
    fi
    
    # Get battery capacity
    local capacity=0
    if [[ -f "$battery_path/capacity" ]]; then
        capacity=$(cat "$battery_path/capacity" 2>/dev/null || echo "0")
    fi
    
    # Get battery status
    local status="Unknown"
    if [[ -f "$battery_path/status" ]]; then
        status=$(cat "$battery_path/status" 2>/dev/null || echo "Unknown")
    fi
    
    # Check adapter status for more accurate charging detection
    local adapter_online=0
    if [[ -n "$adapter_path" && -f "$adapter_path/online" ]]; then
        adapter_online=$(cat "$adapter_path/online" 2>/dev/null || echo "0")
    fi
    
    # Override status if adapter is plugged but status says discharging
    if [[ "$adapter_online" == "1" && "$status" == "Discharging" ]]; then
        if [[ "$capacity" -eq 100 ]]; then
            status="Full"
        else
            status="Charging"
        fi
    fi
    
    # Determine color based on status and capacity
    local color="unknown"
    if [[ "$status" == "Charging" || "$adapter_online" == "1" ]]; then
        color="charging"
    elif [[ "$capacity" -gt 40 ]]; then
        color="good"
    elif [[ "$capacity" -gt 20 ]]; then
        color="warning"
    else
        color="critical"
    fi
    
    # Get time remaining (estimate based on power_now if available)
    local time_remaining=""
    local power_now_file="$battery_path/power_now"
    local energy_now_file="$battery_path/energy_now"
    local energy_full_file="$battery_path/energy_full"
    
    if [[ -f "$power_now_file" && -f "$energy_now_file" ]]; then
        local power_now=$(cat "$power_now_file" 2>/dev/null || echo "0")
        local energy_now=$(cat "$energy_now_file" 2>/dev/null || echo "0")
        local energy_full=$(cat "$energy_full_file" 2>/dev/null || echo "0")
        
        if [[ "$power_now" -gt 0 ]]; then
            if [[ "$status" == "Discharging" ]]; then
                # Time to empty (convert from μW to W for calculation)
                local hours=$((energy_now / power_now))
                local minutes=$(((energy_now * 60 / power_now) % 60))
                if [[ "$hours" -gt 0 || "$minutes" -gt 5 ]]; then
                    time_remaining="${hours}h ${minutes}m remaining"
                fi
            elif [[ "$status" == "Charging" && "$energy_full" -gt 0 ]]; then
                # Time to full
                local energy_to_full=$((energy_full - energy_now))
                if [[ "$energy_to_full" -gt 0 ]]; then
                    local hours=$((energy_to_full / power_now))
                    local minutes=$(((energy_to_full * 60 / power_now) % 60))
                    if [[ "$hours" -gt 0 || "$minutes" -gt 5 ]]; then
                        time_remaining="${hours}h ${minutes}m to full"
                    fi
                fi
            fi
        fi
    fi
    
    # If we couldn't get time from power calculation, try simpler status
    if [[ -z "$time_remaining" ]]; then
        case "$status" in
            "Full")
                time_remaining="Fully charged"
                ;;
            "Charging")
                time_remaining="Charging..."
                ;;
            "Discharging")
                time_remaining="Discharging"
                ;;
            "Not charging")
                time_remaining="Not charging"
                ;;
            *)
                time_remaining="$status"
                ;;
        esac
    fi
    
    echo "$status|$capacity|$time_remaining|$color"
}

get_battery_icon() {
    local status="$1"
    local capacity="$2"
    
    # Charging icons
    if [[ "$status" == "Charging" ]]; then
        echo "󰂄"
    elif [[ "$status" == "Full" ]]; then
        echo "󰁹"
    else
        # Discharging icons based on percentage
        if [[ "$capacity" -ge 90 ]]; then
            echo "󰁹"
        elif [[ "$capacity" -ge 80 ]]; then
            echo "󰂂"
        elif [[ "$capacity" -ge 70 ]]; then
            echo "󰂁"
        elif [[ "$capacity" -ge 60 ]]; then
            echo "󰂀"
        elif [[ "$capacity" -ge 50 ]]; then
            echo "󰁿"
        elif [[ "$capacity" -ge 40 ]]; then
            echo "󰁾"
        elif [[ "$capacity" -ge 30 ]]; then
            echo "󰁽"
        elif [[ "$capacity" -ge 20 ]]; then
            echo "󰁼"
        elif [[ "$capacity" -ge 10 ]]; then
            echo "󰁻"
        else
            echo "󰁺"
        fi
    fi
}

create_dynamic_theme() {
    local battery_color="$1"
    local color_hex="${battery_colors[$battery_color]}"
    
    # Create dynamic theme based on the base theme but with battery color
    cat > "$dynamic_theme" << EOF
/**
 * Enhanced Powermenu Theme for Rofi with Color-Coded Battery Information
 * Dynamic theme generated based on current battery status
 */

* {
    /* Black variant of Catppuccin Mocha */
    bg:                     #000000;  /* Base */
    bg-alt:                 #010101;  /* Mantle */
    bg-darker:              #020202;  /* Crust */
    fg:                     #cdd6f4;  /* Text */
    accent:                 #cba6f7;  /* Mauve */
    fg-selected:            #f38ba8;  /* Red - for selected text */
    
    /* Dynamic battery color */
    battery-color:          $color_hex;
    
    font:                   "JetBrainsMono Nerd Font 14";
    background-color:       transparent;
}

window {
    transparency:            "real";
    location:                center;
    anchor:                  center;
    fullscreen:              false;
    width:                   400px;
    x-offset:                0px;
    y-offset:                0px;
    margin:                  0px;
    padding:                 0px;
    border:                  1px solid;
    border-radius:           0px;
    border-color:            @accent;
    background-color:        @bg;
}

mainbox {
    spacing:                 0px;
    margin:                  0px;
    padding:                 20px;
    background-color:        transparent;
    children:                [ "inputbar", "message", "listview" ];
}

inputbar {
    enabled:                 true;
    spacing:                 10px;
    padding:                 0px 0px 10px 0px;
    border:                  0px;
    border-radius:           0px;
    border-color:            @accent;
    background-color:        transparent;
    text-color:              @fg;
    children:                [ "prompt" ];
}

prompt {
    enabled:                 true;
    padding:                 10px;
    border-radius:           0px;
    background-color:        @accent;
    text-color:              @bg;
    horizontal-align:        0.5;
}

message {
    enabled:                 true;
    margin:                  0px 0px 15px 0px;
    padding:                 10px;
    border:                  1px solid;
    border-radius:           0px;
    border-color:            @battery-color;
    background-color:        @battery-color;
    text-color:              @bg;
}

textbox {
    background-color:        inherit;
    text-color:              inherit;
    vertical-align:          0.5;
    horizontal-align:        0.5;
    padding:                 0px;
    margin:                  0px;
    font-weight:             bold;
}

listview {
    columns:                 1;
    lines:                   4;
    cycle:                   true;
    dynamic:                 true;
    scrollbar:               false;
    layout:                  vertical;
    spacing:                 10px;
    background-color:        transparent;
}

element {
    padding:                 15px;
    border:                  1px solid;
    border-color:            @bg-darker;
    background-color:        @bg-darker;
    text-color:              @fg;
}

element-text {
    background-color:        transparent;
    text-color:              inherit;
    vertical-align:          0.5;
    horizontal-align:        0.0;
    cursor:                  inherit;
}

element selected {
    background-color:        @bg;
    text-color:              @fg-selected;
}
EOF
}

# Get battery information
battery_info=$(get_battery_info)
IFS='|' read -r battery_status battery_percentage battery_time battery_color <<< "$battery_info"
battery_icon=$(get_battery_icon "$battery_status" "$battery_percentage")

# Format battery display
if [[ "$battery_status" != "N/A" ]]; then
    battery_display="$battery_icon $battery_percentage% • $battery_time"
else
    battery_display="⚡ No battery info"
    battery_color="unknown"
fi

# Create dynamic theme with appropriate battery color
create_dynamic_theme "$battery_color"

# Define options with their icons (matching your current wlogout layout)
options=(
    "󰤄 Suspend"     # systemctl suspend
    "󰜉 Reboot"      # systemctl reboot
    "⏻ Shutdown"    # systemctl poweroff
    "󰗽 Logout"      # swaymsg exit
)

# Show powermenu with rofi and get selection
selected=$(printf '%s\n' "${options[@]}" | rofi \
    -dmenu \
    -i \
    -p "Power Menu" \
    -mesg "$battery_display" \
    -theme "$dynamic_theme")

# Clean up dynamic theme file
rm -f "$dynamic_theme"

# Execute the selected action immediately
case "$selected" in
    "󰤄 Suspend")
        systemctl suspend
        ;;
    "󰜉 Reboot")
        systemctl reboot
        ;;
    "⏻ Shutdown")
        systemctl poweroff
        ;;
    "󰗽 Logout")
        swaymsg exit
        ;;
esac
