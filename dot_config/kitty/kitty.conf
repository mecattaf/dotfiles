# vim:ft=kitty

# Font configuration
font_family      JetBrainsMono Nerd Font
#font_family      jetbrains mono nerd font
#bold_font        auto
#italic_font      auto
#bold_italic_font auto
bold_font        JetBrainsMono Nerd Font Bold
font_size        12.0
##font_size_delta 2
disable_ligatures never

# Cursor
cursor_blink_interval 0

# Padding around the text area
window_padding_width 10

detect_urls yes
open_url_with default
underline_hyperlinks always
confirm_os_window_close 0
enable_audio_bell no
copy_on_select clipboard
#skip_trailing_lines smart
remember_window_size  no

# Custom key mapping for font resizing without the 'Shift' key
map ctrl+equal increase_font_size
map ctrl+minus decrease_font_size

# Remap ctrl+shift+b from "move window backwards" (useless since using tiling wm) to nvim-specific tree toggle
unmap ctrl+shift+b
map ctrl+shift+b send_text all \x1b[66;5u

### Scrollback buffer from https://github.com/mikesmithgh/kitty-scrollback.nvim/blob/main/README.md#%EF%B8%8F-setup
# Enable remote control for Kitty
allow_remote_control yes
# Set up a Unix socket for communication
listen_on unix:/tmp/kitty
# Enable shell integration for command tracking
shell_integration enabled
# Alias for kitty-scrollback.nvim
action_alias kitty_scrollback_nvim kitten /var/home/dev/.local/share/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py
# Key mappings to browse scrollback buffer in Neovim
map kitty_mod+h kitty_scrollback_nvim
map kitty_mod+g kitty_scrollback_nvim --config ksb_builtin_last_cmd_output
# Mouse mapping to view clicked command output in Neovim
mouse_map ctrl+shift+right press ungrabbed combine : mouse_select_command_output : kitty_scrollback_nvim --config ksb_builtin_last_visited_cmd_output
#### 

# maybe ctrl+directions to go back 1 word etc
## Clipboard
##map ctrl+shift+v        paste_from_clipboard
#map ctrl+shift+s        paste_from_selection
#map ctrl+shift+c        copy_to_clipboard
#map shift+insert        paste_from_selection
## You can also pass the contents of the current selection to any program using
## pass_selection_to_program. By default, the system's open program is used, but
## you can specify your own, for example:
## map ctrl+shift+o      pass_selection_to_program firefox
#map ctrl+shift+o        pass_selection_to_program 
#
## Scrolling
#map ctrl+shift+up        scroll_line_up
#map ctrl+shift+down      scroll_line_down
#map ctrl+shift+k         scroll_line_up
#map ctrl+shift+j         scroll_line_down
#map ctrl+shift+page_up   scroll_page_up
#map ctrl+shift+page_down scroll_page_down
#map ctrl+shift+home      scroll_home
#map ctrl+shift+end       scroll_end
#map ctrl+shift+h         show_scrollback
#
## Window management
#map ctrl+shift+enter    new_window 
#map ctrl+shift+w        close_window
#map ctrl+shift+]        next_window
#map ctrl+shift+[        previous_window
#map ctrl+shift+f        move_window_forward
#map ctrl+shift+b        move_window_backward
#map ctrl+shift+`        move_window_to_top
#map ctrl+shift+1        first_window
#map ctrl+shift+2        second_window
#map ctrl+shift+3        third_window
#map ctrl+shift+4        fourth_window
#map ctrl+shift+5        fifth_window
#map ctrl+shift+6        sixth_window
#map ctrl+shift+7        seventh_window
#map ctrl+shift+8        eighth_window
#map ctrl+shift+9        ninth_window
#map ctrl+shift+0        tenth_window
# You can also open a new window running an arbitrary program, for example:
# map ctrl+shift+y      new_window mutt
# You can also pass the current selection to the new program by using the @selection placeholder
# map ctrl+shift+y      new_window less @selection
# Finally, you can even send the contents of the current screen + history buffer as stdin using
# the placeholders @text (which is the plain text) and @ansi (which includes text styling escape codes)
# For example, the following command opens the scrollback buffer in less in a new window.
# map ctrl+shift+y      new_window @ansi less +G -R
## Tab management
#map ctrl+shift+right    next_tab
#map ctrl+shift+left     previous_tab
#map ctrl+shift+t        new_tab
#map ctrl+shift+q        close_tab
#map ctrl+shift+l        next_layout
#map ctrl+shift+.        move_tab_forward
#map ctrl+shift+,        move_tab_backward
## Just as with new_window above, you can also pass the name of arbitrary
## commands to run when using new_tab.
#
#
## Miscellaneous
#map ctrl+shift+equal    increase_font_size
#map ctrl+shift+minus    decrease_font_size
#map ctrl+shift+backspace restore_font_size
#map ctrl+shift+f11      toggle_fullscreen
#
# Catppuccin Mocha colors
# The basic colors
foreground              #CDD6F4
background              #1E1E2E
selection_foreground    #1E1E2E
selection_background    #F5E0DC

# Cursor colors
cursor                  #F5E0DC
cursor_text_color       #1E1E2E

# URL underline color when hovering with mouse
url_color               #F5E0DC

# Kitty window border colors
active_border_color     #B4BEFE
inactive_border_color   #6C7086
bell_border_color       #F9E2AF

# OS Window titlebar colors
wayland_titlebar_color  #1E1E2E
macos_titlebar_color    #1E1E2E

# Tab bar colors
active_tab_foreground   #11111B
active_tab_background   #CBA6F7
inactive_tab_foreground #CDD6F4
inactive_tab_background #181825
tab_bar_background      #11111B

# Colors for marks (marked text in the terminal)
mark1_foreground #1E1E2E
mark1_background #B4BEFE
mark2_foreground #1E1E2E
mark2_background #CBA6F7
mark3_foreground #1E1E2E
mark3_background #74C7EC

# The 16 terminal colors

# black
color0 #45475A
color8 #585B70

# red
color1 #F38BA8
color9 #F38BA8

# green
color2  #A6E3A1
color10 #A6E3A1

# yellow
color3  #F9E2AF
color11 #F9E2AF

# blue
color4  #89B4FA
color12 #89B4FA

# magenta
color5  #F5C2E7
color13 #F5C2E7

# cyan
color6  #94E2D5
color14 #94E2D5

# white
color7  #BAC2DE
color15 #A6ADC8
